openapi: 3.0.0
info:
  version: 1.7.0
  title: 73rd Afes website API
servers:
- url: https://api.afes.info/
- url: http://localhost:8000/ # for local test

paths:
  /admin/login/:
    post:
      summary: ログイン認証と admin API token の受け取り
      description: 5回/分まで試行可能
      tags:
      - admin auth
      requestBody:
        description: 認証情報
        content:
          application/json:
            schema:
              type: object
              required:
              - id
              - password
              properties:
                id:
                  type: string
                password:
                  type: string
      responses:
        200:
          description: admin API token
          content:
            application/json:
              schema:
                type: object
                properties:
                  token:
                    type: string
        401:
          description: 認証失敗
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        429:
          description: 試行回数の上限に到達
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
  /admin/user/:
    get:
      summary: ログイン中の admin の情報の取得
      description: admin API token から、アカウント情報を取得
      tags:
      - admin auth
      security:
      - admin: []
      responses:
        200:
          description: ログイン中の admin ユーザー情報
          content:
            application/json:
              schema:
                type: object
                required:
                - id
                - name
                properties:
                  id:
                    type: string
                  name:
                    type: string
        401:
          description: admin API Token が無効
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
  /admin/change_password/:
    post:
      summary: パスワード変更
      tags:
      - admin auth
      security:
      - admin: []
      requestBody:
        description: 新しいパスワード(8文字以上)
        content:
          application/json:
            schema:
              type: object
              required:
              - password
              properties:
                password:
                  type: string
      responses:
        204:
          description: 成功 返り値なし
        400:
          description: 新しいパスワードが条件を満たしていない

  /writer/login/:
    post:
      summary: ログイン認証と writer API token の受け取り
      tags:
      - writer auth
      requestBody:
        description: 認証情報
        content:
          application/json:
            schema:
              type: object
              required:
              - id
              - password
              properties:
                id:
                  type: string
                password:
                  type: string
      responses:
        200:
          description: writer API token
          content:
            application/json:
              schema:
                type: object
                properties:
                  token:
                    type: string
        401:
          description: 認証失敗
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        429:
          description: 試行回数の上限に到達
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
  /writer/user/:
    get:
      summary: ログイン中の writer の情報の取得
      description: writer API token から、アカウント情報を取得
      tags:
      - writer auth
      security:
      - blogWriter: []
      responses:
        200:
          description: ログイン中の writer ユーザー情報
          content:
            application/json:
              schema:
                type: object
                required:
                - id
                - name
                properties:
                  id:
                    type: string
                  name:
                    type: string
        401:
          description: writer API token が無効
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
  /writer/change_password/:
    post:
      summary: パスワード変更
      tags:
      - writer auth
      security:
      - blogWriter: []
      requestBody:
        description: 新しいパスワード(8文字以上)
        content:
          application/json:
            schema:
              type: object
              required:
              - password
              properties:
                password:
                  type: string
      responses:
        204:
          description: 成功 返り値なし
        400:
          description: 新しいパスワードが条件を満たしていない

  /blog/articles/:
    get:
      summary: article のリストを取得
      tags:
      - blog article
      parameters:
      - in: query
        name: filter
        schema:
          allOf:
          - $ref: "#/components/schemas/BlogArticle"
          - properties:
              author_id:
                type: string
              created_at:
                readOnly: true
              updated_at:
                readOnly: true
        style: form
        explode: true
        required: false
        description: |
          article の検索条件  
          AND 検索
      - in: query
        name: summary_length
        schema:
          type: integer
        style: form
        required: false
        description: |
          指定すると、 summary がarticle 本文の指定字数分の部分文字列になる  
          指定しない場合、 summary は article の本文 (content) と同一
      - in: query
        name: q
        schema:
          type: string
        description: |
          検索クエリ  
          title, content から検索  
          filter との AND 検索
      responses:
        200:
          description: |
            検索条件をすべて満たした article の配列  
            該当するものがない場合は空の配列
          content:
            application/json:
              schema:
                type: array
                items:
                  allOf:
                  - $ref: "#/components/schemas/BlogArticle"
                  - properties:
                      summary:
                        type: string
                        description: article 本文より、先頭から summary_length 字分の部分文字列
                  - required:
                    - id
                    - user_id
                    - category
                    - title
                    - author
                    - created_at
                    - updated_at
                    - summary
        400:
          description: 誤ったパラメータが含まれている
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
  /blog/articles/{id}:
    parameters:
    - $ref: "#/components/parameters/blogArticleId"
    get:
      summary: article の情報を返す
      tags:
      - blog article
      responses:
        200:
          description: article の情報
          content:
            application/json:
              schema:
                allOf:
                - $ref: "#/components/schemas/BlogArticle"
                - properties:
                    content:
                      type: string
                - required:
                  - id
                  - user_id
                  - category
                  - title
                  - revision_id
                  - created_at
                  - updated_at
                  - content
        404:
          description: ID に該当する article が存在しない
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
    patch:
      summary: article を更新する
      description: |
        article に対応する要素を渡す事で更新する事ができる  
        一部の要素のみを渡すと、渡された要素のみを更新する
      security:
      - admin: []
      tags:
      - blog article
      requestBody:
        description: 更新したいデータ
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/BlogArticle"
      responses:
        200:
          description: 新しい article の情報
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/BlogArticle"
        400:
          description: 指定された revision の article_id とパスの article_id が一致しない
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        404:
          description: 指定された revision は存在しない
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        409:
          description: 指定された revision の状態が accepted でない
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
    delete:
      summary: article を削除する
      description: article オブジェクトを削除するのみで revision は削除されない
      security:
      - admin: []
      tags:
      - blog article
      responses:
        204:
          description: 成功 返り値なし
        404:
          description: 指定された article が存在しない
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
  /blog/articles/{id}/good/:
    parameters:
    - $ref: "#/components/parameters/blogArticleId"
    put:
      summary: article に対して good を押す
      tags:
      -  blog article
      responses:
        200:
          description: 成功 返り値なし
        404:
          description: 該当の article が存在しない
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        429:
          description: リクエスト過多
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
    delete:
      summary: article から good を1つ除去する
      tags:
      - blog article
      responses:
        200:
          description: 成功 返り値なし
        404:
          description: 該当する article が存在しない
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        429:
          description: リクエスト過多(具体的な値は未定)
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
  /blog/articles/{id}/bad/:
    parameters:
    - $ref: "#/components/parameters/blogArticleId"
    put:
      summary: article に対して bad を押す
      tags:
      - blog article
      responses:
        200:
          description: 成功 返り値なし
        404:
          description: 該当する article が存在しない
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        429:
          description: リクエスト過多(具体的な値は未定)
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
    delete:
      summary: article から bad を1つ除去する
      tags:
      - blog article
      responses:
        200:
          description: 成功 返り値なし
        404:
          description: 該当する article が存在しない
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        429:
          description: リクエスト過多(具体的な値は未定)
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
  /blog/categories/:
    get:
      summary: category のリストを取得する
      tags:
      - blog article
      responses:
        200:
          description: category のリスト
          content:
            application/json:
              schema:
                type: object
                additionalProperties:
                  description: category の ID
                  type: object
                  properties:
                    name:
                      type: string
                      description:
                        category の名前
                    visible:
                      type: boolean
                      description: |
                        top ページのカテゴリー一覧にて表示するか否か  
                        通常、公開されているかどうかを示しています。

  /blog/revisions/:
    get:
      summary: revision のリストを取得
      description: |
        admin の場合は 全 revision を取得できる  
        writer の場合は revision の author と writer が一致するもののみ取得できる
      tags:
      - blog revision
      security:
      - admin: []
      - blogWriter: []
      parameters:
      - in: query
        name: filter
        schema:
          allOf:
            - $ref: "#/components/schemas/BlogRevision"
            - properties:
                author_id:
                  type: string
                timestamp:
                  readOnly: false
        style: form
        explode: true
        required: false
        description: |
          revision の検索条件
          AND 検索
      responses:
        200:
          description: |
            検索条件をすべて満たした revision の配列  
            該当するものがない場合は空の配列
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/BlogRevision"
        400:
          description: 誤ったパラメータが含まれている
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
    post:
      summary: 新しい revision を作る
      tags:
      - blog revision
      security:
      - blogWriter: []
      requestBody:
        description: 作成したい revision の情報
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/BlogRevision"
      responses:
        201:
          description: revision の情報
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/BlogRevision"
        400:
          description: パラメータに過不足がある
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
  /blog/revisions/contrib/:
    post:
      summary: 寄稿を投稿する
      description: |
        投稿された寄稿は「名もなき麻布生」名義で revision として作成される  
        「名もなき麻布生」 は ID anonymous, password は空文字列のものを用意する
      tags:
      - blog revision
      requestBody:
        description: |
          投稿したい寄稿の情報  
          article_id: バックエンド側で重複しないように「contrib_(英数列5文字)」となるように設定する
        content:
          application/json:
            schema:
              allOf:
              - $ref: "#/components/schemas/BlogRevision"
              - properties:
                  article_id:
                    readOnly: true
      responses:
        201:
          description: revision の情報
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/BlogRevision"
        400:
          description: パラメータに誤りがある
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
  /blog/revisions/{id}:
    parameters:
    - $ref: "#/components/parameters/blogRevisionId"
    get:
      summary: revision を取得する
      description: writer の場合、 自身が author ではない revision は取得できない
      tags:
      - blog revision
      security:
      - admin: []
      - blogWriter: []
      responses:
        200:
          description: revision の情報
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/BlogRevision"
        403:
          description: 該当する revision の閲覧権限がない
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        404:
          description: 該当する revision が存在しない
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
    post:
      summary: revision を編集する
      description: |
        指定された revision を元に新たに revision を作成する  
        指定された元の revision は更新されない
      tags:
      - blog revision
      security:
      - admin: []
      requestBody:
        description: |
          更新したい情報  
          指定されなかった要素がある場合は、元の revision と同一の内容になる
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/BlogRevision"
      responses:
        201:
          description: 新しい revision の情報
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/BlogRevision"
        400:
          description: パラメータに不備がある
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
  /blog/revisions/{id}/accept/:
    parameters:
    - $ref: "#/components/parameters/blogRevisionId"
    patch:
      summary: revision を承認する
      description: revision の status を accept にする
      security:
      - admin: []
      tags:
      - blog revision
      responses:
        200:
          description: 新しい revision の情報
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/BlogRevision"
        404:
          description: 該当する revision が存在しない
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
  /blog/revisions/{id}/reject/:
    parameters:
    - $ref: "#/components/parameters/blogRevisionId"
    patch:
      summary: revision を拒否する
      security:
      - admin: []
      tags:
      - blog revision
      responses:
        200:
          description: 成功 返り値なし
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/BlogRevision"
        404:
          description: 該当する revision が存在しない
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"

  /images/:
    post:
      summary: 新しい image を投稿する
      tags:
      - images
      security:
      - blogWriter: []
      requestBody:
        description: image の情報
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                content:
                  type: string
                  format: binary
              required:
              - content
      responses:
        201:
          description: |
            image の ID  
            id: 自動生成のランダムな40文字の英数列
          content:
            application/json:
              schema:
                type: object
                properties:
                  id:
                    type: string
                required:
                - id
        400:
          description: パラメータに問題があるか、アップロードされたものが画像でない
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
  /images/{id}/:
    get:
      summary: ID から image を取得する
      description: |
        orig を指定すると、アップロードされた元サイズの画像が取得される  
        幅・高さの両方を指定すると、縦横でそれぞれ拡大縮小をする  
        幅・高さの片方を指定すると、画像全体を適切に拡大縮小する  
        すべて指定しない場合は、縦幅が最大600、横幅が最大1080になるように設定される  
      tags:
      - images
      parameters:
      - in: path
        name: id
        required: true
        schema:
          type: string
        description: image の ID
      - in: query
        name: w
        required: false
        schema:
          type: integer
        description: image の幅
      - in: query
        name: h
        required: false
        schema:
          type: integer
        description: image の高さ
      - in: query
        name: orig
        required: false
        schema:
          type: string
          enum: ['yes']
        description: オリジナルの画像を取得するかどうか
      responses:
        200:
          description: content
          content:
            image/*:
              schema:
                type: string
                format: binary
        404:
          description: 指定された image が存在しない
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"

  /ogimage/:
    get:
      summary: 固定ページ用の ogimage を生成する
      tags:
      - ogimage
      parameters:
      - in: query
        name: title
        description: タイトル `\n` または `%0A` で改行
        required: true
        schema:
          type: string
      responses:
        200:
          description: 画像
          content:
            image/*:
              schema:
                type: string
                format: binary
        400:
          description: パラメータに不備がある
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
  /ogimage/articles/{id}:
    get:
      summary: article から ogimage を生成する
      tags:
      - ogimage
      parameters:
      - in: path
        name: id
        required: true
        schema:
          type: string
        description: article の ID
      responses:
        200:
          description: |
            画像  
            title: `\n` または `%0A` で改行  
            author: article に handle_name が設定されている場合、 handle_name が代わりに表示される
          content:
            image/*:
              schema:
                type: string
                format: binary
        400:
          description: パラメータに不備がある
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        404:
          description: 該当する article が存在しない
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
  /ogimage/preview/:
    get:
      summary: ogimage を指定されたパラメータから生成する
      tags:
      - ogimage
      parameters:
      - in: query
        name: title
        required: true
        schema:
          type: string
        description: title `\n` または `%0A` で改行
      - in: query
        name: author
        required: false
        schema:
          type: string
        description: author (handle_name 設定時は handle_name)
      - in: query
        name: category
        required: false
        schema:
          type: string
        description: category
      responses:
        200:
          description: 画像
          content:
            image/*:
              schema:
                type: string
                format: binary
        400:
          description: パラメータに不備がある
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
    
  /reservation/:
    post:
      summary: 予約申し込み
      tags:
      - reservation
      requestBody:
        description: 予約するための個人情報
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/reservationInfo"
      responses:
        200:
          description: |
            予約ID  
            またメールにメール認証用のコードを送付
          content:
            application/json:
              schema:
                type: object
                properties:
                  reservation_id:
                    type: string
  /reservation/auth_email/:
    post:
      summary: メール認証
      tags:
      - reservation
      requestBody:
        description: メール認証用の情報
        content:
          application/json:
            schema:
              allOf:
                - $ref: "#/components/schemas/reservationInfo"
                - properties:
                    email:
                      type: string
                      writeOnly: false
      responses:
        200:
          description: |
            予約情報の一部
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/reservationInfo"
  /reservation/{id}/:
    parameters:
    - $ref: "#/components/parameters/reservationId"
    get:
      security:
        - admin: []
      summary: 予約情報の確認
      responses:
        200:
          description: |
              予約情報
          content:
            application/json:
              schema:
                allOf:
                  - $ref: "#/components/schemas/reservationInfo"
                  - properties:
                      email:
                        type: string
                        writeOnly: false
                      name:
                        type: string
                        writeOnly: false
                      address:
                        type: string
                        writeOnly: false
                      cellphone:
                        type: string
                        writeOnly: false
  /reservation/search/:
    get:
      security:
        - admin: []
      summary: 予約情報の検索
      parameters:
      - in: query
        name: filter
        schema:
          $ref: "#/components/schemas/reservationPrivateInfo"
        style: form
        explode: true
        required: false
        description: |
          予約情報の検索条件  
          AND 検索
      responses:
        200:
          description: |
            検索条件をすべて満たした予約情報の配列   
            該当するものがない場合は空の配列  
          content:
            application/json:
              schema:
                type: array
                items:
                  allOf:
                  - $ref: "#/components/schemas/reservationInfo"
  
  /general/enter/:
    post:
      summary: 文化祭入場処理
      requestBody:
        description: 入場に使用する情報
        content:
          application/json:
            schema:
              properties:
                reservation_id:
                  type: string
                guest_id:
                  type: string
                  description: リストバンドの ID
      responses:
        200:
          description: |
            退場時刻  
            予約情報を参照して設定
          content:
            application/json:
              schema:
                type: object
                properties:
                  exit_time:
                    type: string
  /general/exit/:
    post:
      summary: 文化祭退場処理
      requestBody:
        description: 来場者の ID
        content:
          application/json:
            schema:
              properties:
                guest_id:
                  type: string
                  description: 来場者の ID
      responses:
        200:
          description: 返り値なし
  /general/guest/:
    get:
      summary: 入場者一覧の取得
      responses:
        200:
          description:
            guest 
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/guestInfo"
  /general/guest/{id}/:
    parameters:
    - $ref: "#/components/parameters/guestId"
    get:
      summary: 入場者の情報の取得
      responses:
        200:
          description:
            guest 
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/guestInfo"
  /general/guest/{id}/log/:
    parameters:
    - $ref: "#/components/parameters/guestId"
    get:
      summary: 対象者の行動ログの取得
      responses:
        200:
          description:
            guest 
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/activityLog"
  /exh/status/:
    get:
      summary: 全展示・校内の情報をの取得
      responses:
        200:
          description:
            各展示・校内の情報と滞在状況
          content:
            application/json:
              schema:
                type: object  
                properties:
                  exh:
                    type: object
                    additionalProperties:
                      $ref: "#/components/schemas/exhStatus"
                  all:
                    $ref: "#/components/schemas/exhStatus"
  /exh/status/{id}/:
    parameters:
      - $ref: "#/components/parameters/exhibitionId"
    get:
      summary: 展示の情報をの取得
      responses:
        200:
          description:
            展示の情報と滞在状況
          content:
            application/json:
              schema:
                type: object  
                properties:
                  exh:
                    type: object
                    additionalProperties:
                      $ref: "#/components/schemas/exhStatus"
                  all:
                    $ref: "#/components/schemas/exhStatus"
  /exh/enter/:
    post:
      summary: 展示入室処理
      requestBody:
        description: 入室者の情報
        content:
          application/json:
            schema:
              type: object
              properties:
                guest_id:
                  type: string
      responses:
        200:
          description: |
            展示の滞在者数に関する情報
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/exhStatus"
  /exh/exit/:
    post:
      summary: 展示退室
      requestBody:
        description: 入室者の情報
        content:
          application/json:
            schema:
              type: object
              properties:
                guest_id:
                  type: string
      responses:
        200:
          description: |
            展示の滞在者数に関する情報
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/exhStatus"
  /exh/log/:
    get:
      summary: 展示のスキャンログの取得
      responses:
        200:
          description:
            Log
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/activityLog"

components:
  schemas:
    Error:
      type: object
      required:
        - code
        - message
      properties:
        code:
          type: integer
          format: int32
        message:
          type: string
    BlogArticle:
      type: object
      properties:
        id:
          type: string
        category:
          type: string
        title:
          type: string
        author:
          type: object
          readOnly: true
          properties:
            id:
              type: string
            name:
              type: string
        handle_name:
          type: string
        revision_id:
          type: integer
          format: int32
        good_count:
          type: integer
          format: int32
          readOnly: true
        bad_count:
          type: integer
          readOnly: true
          format: int32
        created_at:
          type: string
          format: date-time
          readOnly: true
        updated_at:
          type: string
          format: date-time
          readOnly: true
    BlogRevision:
      type: object
      properties:
        id:
          type: integer
          format: int32
          readOnly: true
        title:
          type: string
        article_id:
          type: string
          pattern: "[A-Za-z0-9_-]+"
        author:
          type: object
          readOnly: true
          properties:
            id:
              type: string
            name:
              type: string
        handle_name:
          type: string
        timestamp:
          type: string
          format: date-time
          readOnly: true
        content:
          type: string
        status:
          type: string
          readOnly: true
          enum: [waiting, accepted, rejected]
          description: >
            * `waiting` - admin の審査待ち

            * `accepted` - 承認済 この状態の revision のみ公開可能

            * `rejected` - 却下済
      required:
      - id
      - title
      - article_id
      - user_id
      - timestamp
      - status
    reservationPrivateInfo:
      type: object
      allOf:
        - properties:
            name:
              type: string
              writeOnly: true
            address:
              type: string
              writeOnly: true
            cellphone:
              type: string
              writeOnly: true
        - $ref: "#/components/schemas/reservationInfo"
    reservationInfo:
      type: object
      properties:
        email:
          type: string
          writeOnly: true
        people_count:
          type: string
        time_id:
          type: string
      required:
        - email
        - name
        - address
        - cellphone
        - people_count
        - time_id
    guestInfo:
      type: object
      properties:
        id:
          type: string
        entered_at:
          type: string
          format: date-time
        exit_scheduled_time:
          type: string
          format: date-time
        exited_at:
          type: string
          format: date_time
        location:
          type: string
        color:
          $ref: "#/components/schemas/wristBandColor"
    wristBandColor:
      type: object
      properties:
        id:
          type: string
        name:
          type: string
        hex:
          type: string
    exhStatus:
      properties:
        count:
          type: object
          additionalProperties:
            type: integer
        limit:
          type: integer
        room_id:
          type: string
    activityLog:
      properties:
        timestamp:
          type: string
        guest:
          type: object
          properties:
            id:
              type: string
            type:
              type: string
        log_type:
          type: string
          enum: [enter, exit]

  parameters:
    blogArticleId:
      in: path
      name: id
      required: true
      schema:
        type: string
      description: article の ID
    blogRevisionId:
      in: path
      name: id
      required: true
      schema:
        type: integer
        format: int32
      description: revision の ID
    reservationId:
      in: path
      name: id
      required: true
      schema:
        type: string
      description: 予約 ID
    guestId:
      in: path
      name: id
      required: true
      schema:
        type: string
      description: リストバンド ID
    exhibitionId:
      in: path
      name: id
      required: true
      schema:
        type: string
      description: 展示 ID

  securitySchemes:
    admin:
      type: apiKey
      in: header
      name: X-ADMIN-TOKEN
      description: API token の情報
    blogWriter:
      type: apiKey
      in: header
      name: X-BLOG-WRITER-TOKEN
      description: API token の情報
