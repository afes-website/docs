openapi: "3.0.0"
info:
  version: 1.0.0
  title: Afes73 website API
servers:
  - url: https://api.afes.info/
  - url: http://localhost:8000/ # for local test

paths:
  /admin/login:
    post:
      summary: Login and get API Key
      tags:
      - admin auth
      requestBody:
        description: credentials
        content:
          application/json:
            schema:
              type: "object"
              required:
              - id
              - password
              properties:
                id:
                  type: string
                password:
                  type: string
      responses:
        '200':
          description: "Login Successful"
          content:
            application/json:
              schema:
                type: "object"
                properties:
                  token:
                    type: "string"
        '401':
          description: "Login failed"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        '429':
          description: "Too many login attempts"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
  /admin/user:
    get:
      summary: get logged in user info
      tags:
      - admin auth
      security:
      - admin: []
      responses:
        '200':
          description: "User info (logged in)"
          content:
            application/json:
              schema:
                type: "object"
                required:
                  - id
                  - name
                properties:
                  id:
                    type: string
                  name:
                    type: string
        '401':
          description: "Not logged in"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
  /blog/articles:
    get:
      summary: get list of articles
      tags:
      - blog
      parameters:
      - in: query
        name: filter
        schema:
          $ref: '#/components/schemas/BlogArticleInfo'
        style: form
        explode: true
        required: true
        description: Numeric ID of the user to get
      responses:
        '200':
          description: "list of articles"
          content:
            application/json:
              schema:
                type: "array"
                items:
                  allOf:
                  - $ref: "#/components/schemas/BlogArticleInfo"
                  - required:
                    - id
                    - author
                    - category
                    - title
                    - created_at
                    - updated_at
    post:
      summary: create new post
      tags:
      - blog
      security:
      - admin: []
      requestBody:
        description: Numeric ID of the user to get
        content:
          application/json:
            schema:
              allOf:
              - $ref: '#/components/schemas/BlogArticle'
              - required:
                - author
                - category
                - title
                - content
        required: true
      responses:
        '200':
          description: "list of articles"
          content:
            application/json:
              schema:
                allOf:
                - $ref: "#/components/schemas/BlogArticle"
                - required:
                  - id
                  - author
                  - category
                  - title
                  - created_at
                  - updated_at
  /blog/articles/{id}:
    parameters:
    - in: path
      name: id
      required: true
      schema:
        type: integer
      description: id of an article
    get:
      summary: get specified article
      tags:
      - blog
      responses:
        '200':
          description: "article info"
          content:
            application/json:
              schema:
                allOf:
                - $ref: "#/components/schemas/BlogArticle"
                - required:
                  - id
                  - author
                  - category
                  - title
                  - created_at
                  - updated_at
        '404':
          description: "no article found"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
    patch:
      summary: update specified article
      tags:
      - blog
      security:
      - admin: []
      requestBody:
        description: Numeric ID of the user to get
        content:
          application/json:
            schema:
              allOf:
              - $ref: '#/components/schemas/BlogArticle'
              - required:
                - author
                - category
                - title
                - content
        required: true
      responses:
        '200':
          description: "list of articles"
          content:
            application/json:
              schema:
                allOf:
                - $ref: "#/components/schemas/BlogArticle"
                - required:
                  - id
                  - author
                  - category
                  - title
                  - created_at
                  - updated_at
        '404':
          description: "no article found"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
    delete:
      summary: update specified article
      tags:
      - blog
      security:
      - admin: []
      responses:
        '204':
          description: "deletion successful"
        '404':
          description: "no article found"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"

components:
  schemas:
    Error:
      type: object
      required:
        - code
        - message
      properties:
        code:
          type: integer
          format: int32
        message:
          type: string
    BlogArticleInfo:
      type: object
      properties:
        id:
          type: string
        author:
          type: string
        category:
          type: string
        title:
          type: string
        created_at:
          type: string
          format: date-time
        updated_at:
          type: string
          format: date-time
    BlogArticle:
      allOf:
      - $ref: '#/components/schemas/BlogArticleInfo'
      - properties:
          content:
            type: string
  parameters:
  securitySchemes:
    admin:
      type: apiKey
      in: header
      name: X-ADMIN-TOKEN
      description: Credentials or access token for API
