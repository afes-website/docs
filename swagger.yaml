openapi: 3.0.0
info:
  version: 1.7.0
  title: 73rd Afes website api
servers:
- url: https://api.afes.info/
- url: http://localhost:8000/ # for local test

paths:
  /admin/login:
    post:
      summary: ログイン認証と API キーの受け取り
      description: 5回/分まで試行可能
      tags:
      - admin auth
      requestBody:
        description: 認証情報
        content:
          application/json:
            schema:
              type: object
              required:
              - id
              - password
              properties:
                id:
                  type: string
                password:
                  type: string
      responses:
        200:
          description: Admin api token
          content:
            application/json:
              schema:
                type: object
                properties:
                  token:
                    type: string
        401:
          description: 認証失敗
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        429:
          description: 試行回数の上限に到達
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
  /admin/user:
    get:
      summary: ログイン中の Admin の情報の取得
      description: Admin の API KEY から、アカウント情報を取得
      tags:
      - admin auth
      security:
      - admin: []
      responses:
        200:
          description: ログイン中の Admin ユーザー情報
          content:
            application/json:
              schema:
                type: object
                required:
                - id
                - name
                properties:
                  id:
                    type: string
                  name:
                    type: string
        401:
          description: Admin Token が無効
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
  /admin/change_password:
    post:
      summary: パスワード変更
      tags:
      - admin auth
      security:
      - admin: []
      requestBody:
        description: 新しいパスワード(8文字以上)
        content:
          application/json:
            schema:
              type: object
              required:
              - password
              properties:
                password:
                  type: string
      responses:
        204:
          description: 処理完了
        400:
          description: 新しいパスワードが条件を満たしていない

  /writer/login:
    post:
      summary: ログイン認証と API キーの受け取り
      tags:
      - writer auth
      requestBody:
        description: 認証情報
        content:
          application/json:
            schema:
              type: object
              required:
              - id
              - password
              properties:
                id:
                  type: string
                password:
                  type: string
      responses:
        200:
          description: Admin api token
          content:
            application/json:
              schema:
                type: object
                properties:
                  token:
                    type: string
        401:
          description: 認証失敗
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        429:
          description: 試行回数の上限に到達
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
  /writer/user:
    get:
      summary: ログイン中の Writer の情報の取得
      description: Writer の API KEY から、アカウント情報を取得
      tags:
      - writer auth
      security:
      - blogWriter: []
      responses:
        200:
          description: ログイン中のAdminユーザー情報
          content:
            application/json:
              schema:
                type: object
                required:
                - id
                - name
                properties:
                  id:
                    type: string
                  name:
                    type: string
        401:
          description: Not logged in
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
  /writer/change_password:
    post:
      summary: パスワード変更
      tags:
      - writer auth
      security:
      - blogWriter: []
      requestBody:
        description: 新しいパスワード(8文字以上)
        content:
          application/json:
            schema:
              type: object
              required:
              - password
              properties:
                password:
                  type: string
      responses:
        204:
          description: 処理完了
        400:
          description: 新しいパスワードが条件を満たしていない

  /blog/articles:
    get:
      summary: article のリストを取得
      tags:
      - blog article
      parameters:
      - in: query
        name: filter
        schema:
          allOf:
          - $ref: "#/components/schemas/BlogArticle"
          - properties:
              author_id:
                type: string
              created_at:
                readOnly: true
              updated_at:
                readOnly: true
        style: form
        explode: true
        required: false
        description: |
          article の検索条件
          AND 検索
      - in: query
        name: summary_length
        schema:
          type: integer
        style: form
        required: false
        description: |
          指定すると、 summary がarticle 本文の指定字数分の部分文字列になる
          指定しない場合、 summary は article の本文 (content) と同一
      - in: query
        name: q
        schema:
          type: string
        description: |
          検索クエリ
          title, content から検索
          filter との AND 検索
      responses:
        200:
          description: |
            検索条件をすべて満たした article の配列
            該当するものがない場合は空の配列
          content:
            application/json:
              schema:
                type: array
                items:
                  allOf:
                  - $ref: "#/components/schemas/BlogArticle"
                  - properties:
                      summary:
                        type: string
                        description: article 本文より、先頭から summary_length 字分の部分文字列
                  - required:
                    - id
                    - user_id
                    - category
                    - title
                    - author
                    - created_at
                    - updated_at
                    - summary
        400:
          description: 誤ったパラメータが含まれている
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
  /blog/articles/{id}:
    parameters:
    - $ref: "#/components/parameters/blogArticleId"
    get:
      summary: article の情報を返す
      tags:
      - blog article
      responses:
        200:
          description: article の情報
          content:
            application/json:
              schema:
                allOf:
                - $ref: "#/components/schemas/BlogArticle"
                - properties:
                    content:
                      type: string
                - required:
                  - id
                  - user_id
                  - category
                  - title
                  - revision_id
                  - created_at
                  - updated_at
                  - content
        404:
          description: id に該当する article が存在しない
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
    patch:
      summary: article を更新する
      description: |
        article に対応する要素を渡す事で更新する事ができる
        一部の要素のみを渡すと、渡された要素のみを更新する
      security:
      - admin: []
      tags:
      - blog article
      requestBody:
        description: 更新したいデータ
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/BlogArticle"
      responses:
        200:
          description: 新しい article の情報
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/BlogArticle"
        400:
          description: 指定された revision の article_id とパスの article_id が一致しない
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        404:
          description: 指定された revision は存在しない
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        409:
          description: 指定された revision の状態が accepted でない
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
    delete:
      summary: article を削除する
      description: article オブジェクトを削除するのみで revision は削除されない
      security:
      - admin: []
      tags:
      - blog article
      responses:
        204:
          description: 削除完了 返り値なし
        404:
          description: 指定された article が存在しない
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
  /blog/articles/{id}/good:
    parameters:
    - $ref: "#/components/parameters/blogArticleId"
    put:
      summary: article に対して good を押す
      tags:
      -  blog article
      responses:
        200:
          description: 成功 返り値なし
        404:
          description: 該当の article が存在しない
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        429:
          description: リクエスト過多
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
    delete:
      summary: article から good を1つ除去する
      tags:
      - blog article
      responses:
        200:
          description: 成功 返り値なし
        404:
          description: 該当する article が存在しない
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        429:
          description: リクエスト過多(具体的な値は未定)
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
  /blog/articles/{id}/bad:
    parameters:
    - $ref: "#/components/parameters/blogArticleId"
    put:
      summary: article に対して bad を押す
      tags:
      - blog article
      responses:
        200:
          description: 成功 返り値なし
        404:
          description: 該当する article が存在しない
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        429:
          description: リクエスト過多(具体的な値は未定)
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
    delete:
      summary: article から bad を1つ除去する
      tags:
      - blog article
      responses:
        200:
          description: 成功 返り値なし
        404:
          description: 該当する article が存在しない
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        429:
          description: リクエスト過多(具体的な値は未定)
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
  /blog/categories/:
    get:
      summary: category のリストを取得する
      tags:
      - blog article
      responses:
        200:
          description: category のリスト
          content:
            application/json:
              schema:
                type: object
                additionalProperties:
                  description: category の ID
                  type: object
                  properties:
                    name:
                      type: string
                      description:
                        category の名前
                    visible:
                      type: boolean
                      description: |
                        top ページのカテゴリー一覧にて表示するか否か
                        通常、公開されているかどうかを示しています。

  /blog/revisions/:
    get:
      summary: revision のリストを取得
      description: |
        admin の場合は 全 revision を取得できる
        writer の場合は revision の author と writer の ID が一致するもののみ取得できる
      tags:
      - blog revision
      security:
      - admin: []
      - blogWriter: []
      parameters:
      - in: query
        name: filter
        schema:
          allOf:
            - $ref: "#/components/schemas/BlogRevision"
            - properties:
                author_id:
                  type: string
                timestamp:
                  readOnly: false
        style: form
        explode: true
        required: false
        description: |
          revision の検索条件
          AND 検索
      responses:
        200:
          description: |
            検索条件をすべて満たした revision の配列
            該当するものがない場合は空の配列
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/BlogRevision"
        400:
          description: 誤ったパラメータが含まれている
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
    post:
      summary: 新しい revision を作る
      tags:
      - blog revision
      security:
      - blogWriter: []
      requestBody:
        description: 作成したい revision の情報
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/BlogRevision"
      responses:
        201:
          description: 完了
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/BlogRevision"
        400:
          description: パラメータに過不足がある
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
  /blog/revisions/contrib/:
    post:
      summary: 寄稿を投稿する
      description: |
        投稿された寄稿は「名もなき麻布生」名義で revision として作成される
        「名もなき麻布生」 は ID anonymous, password は空文字列のものを用意する
      tags:
      - blog revision
      requestBody:
        description: |
          投稿したい寄稿の情報
          article_id: バックエンド側で重複しないように「contrib_(英数列5文字)」となるように設定する
        content:
          application/json:
            schema:
              allOf:
              - $ref: "#/components/schemas/BlogRevision"
              - properties:
                  article_id:
                    readOnly: true
      responses:
        201:
          description: 投稿完了
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/BlogRevision"
        400:
          description: パラメータに誤りがある
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
  /blog/revisions/{id}:
    parameters:
    - $ref: "#/components/parameters/blogRevisionId"
    get:
      summary: revision を取得する
      description: writer の場合、user_id が一致していない revision は取得できない
      tags:
      - blog revision
      security:
      - admin: []
      - blogWriter: []
      responses:
        200:
          description: revision の情報
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/BlogRevision"
        403:
          description: 該当する revision の閲覧権限がない
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        404:
          description: 該当する revision が存在しない
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
    post:
      summary: revision を編集する
      description: |
        指定された revision を元に新たに revision を作成する
        指定された元の revision は更新されない
      tags:
      - blog revision
      security:
      - admin: []
      requestBody:
        description: |
          更新したい情報
          指定されなかった要素がある場合は、元の revision と同一の内容になる
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/BlogRevision"
      responses:
        201:
          description: 新しい revision の情報
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/BlogRevision"
        400:
          description: パラメータに不備がある
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
  /blog/revisions/{id}/accept:
    parameters:
    - $ref: "#/components/parameters/blogRevisionId"
    patch:
      summary: revision を承認する
      description: revision の status を accept にする
      security:
      - admin: []
      tags:
      - blog revision
      responses:
        200:
          description: 新しい revision の情報
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/BlogRevision"
        404:
          description: no specified revision found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
  /blog/revisions/{id}/reject:
    parameters:
    - $ref: "#/components/parameters/blogRevisionId"
    patch:
      summary: revision を拒否する
      security:
      - admin: []
      tags:
      - blog revision
      responses:
        200:
          description: 成功
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/BlogRevision"
        404:
          description: 該当する revision が存在しない
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"

  /images:
    post:
      summary: 新しい imgae を投稿する
      tags:
      - images
      security:
      - blogWriter: []
      requestBody:
        description: image の情報
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                content:
                  type: string
                  format: binary
              required:
              - content
      responses:
        201:
          description: |
            image の id
            id: 自動生成のランダムな40文字の英数列
          content:
            application/json:
              schema:
                type: object
                properties:
                  id:
                    type: string
                required:
                - id
        400:
          description: パラメータに問題があるが、アップロードされたものが画像でない
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
  /images/{id}:
    get:
      summary: id から image を取得する
      description: |
        original を指定すると、アップロードされた元ファイルの画像が取得される  
        幅・高さの両方を指定すると、縦横でそれぞれ拡大縮小をする  
        幅・高さの片方を指定すると、画像全体を適切に拡大縮小する  
        すべて指定しない場合は、縦幅が最大600、横幅が最大1080になるように設定される  
      tags:
      - images
      parameters:
      - in: path
        name: id
        required: true
        schema:
          type: string
        description: image の id
      - in: query
        name: w
        required: false
        schema:
          type: integer
        description: image の幅
      - in: query
        name: h
        required: false
        schema:
          type: integer
        description: image の高さ
      - in: query
        name: orig
        required: false
        schema:
          type: string
          enum: ['yes']
        description: オリジナルの画像を取得するかどうか
      responses:
        200:
          description: content
          content:
            image/*:
              schema:
                type: string
                format: binary
        404:
          description: 指定された image が存在しない
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"

  /ogimage:
    get:
      summary: 固定ページ用の ogimage を生成する
      tags:
      - ogimage
      parameters:
      - in: query
        name: title
        description: タイトル `\n`または改行コードで改行
        required: true
        schema:
          type: string
      responses:
        200:
          description: 画像
          content:
            image/*:
              schema:
                type: string
                format: binary
        400:
          description: パラメータに不備がある
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
  /ogimage/articles/{id}:
    get:
      summary: article から ogimage を生成する
      tags:
      - ogimage
      parameters:
      - in: path
        name: id
        required: true
        schema:
          type: string
        description: article の id
      responses:
        200:
          description: |
            画像
            title: `\n`または改行コードが含まれている場合改行される
            author: article に handle_name が設定されている場合、 handle_name が代わりに表示される
          content:
            image/*:
              schema:
                type: string
                format: binary
        400:
          description: パラメータに不備がある
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        404:
          description: 該当する article が存在しない
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
  /ogimage/preview:
    get:
      summary: ogimage を指定されたパラメータから生成する
      tags:
      - ogimage
      parameters:
      - in: query
        name: title
        required: true
        schema:
          type: string
        description: title `\n`または改行コードで改行
      - in: query
        name: author
        required: false
        schema:
          type: string
        description: author (handle_name 設定時は handle_name)
      - in: query
        name: category
        required: false
        schema:
          type: string
        description: category
      responses:
        200:
          description: 画像
          content:
            image/*:
              schema:
                type: string
                format: binary
        400:
          description: パラメータに不備がある
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"

components:
  schemas:
    Error:
      type: object
      required:
        - code
        - message
      properties:
        code:
          type: integer
          format: int32
        message:
          type: string
    BlogArticle:
      type: object
      properties:
        id:
          type: string
        category:
          type: string
        title:
          type: string
        author:
          type: object
          readOnly: true
          properties:
            id:
              type: string
            name:
              type: string
        handle_name:
          type: string
        revision_id:
          type: integer
          format: int32
        good_count:
          type: integer
          format: int32
          readOnly: true
        bad_count:
          type: integer
          readOnly: true
          format: int32
        created_at:
          type: string
          format: date-time
          readOnly: true
        updated_at:
          type: string
          format: date-time
          readOnly: true
    BlogRevision:
      type: object
      properties:
        id:
          type: integer
          format: int32
          readOnly: true
        title:
          type: string
        article_id:
          type: string
          pattern: "[A-Za-z0-9_-]+"
        author:
          type: object
          readOnly: true
          properties:
            id:
              type: string
            name:
              type: string
        handle_name:
          type: string
        timestamp:
          type: string
          format: date-time
          readOnly: true
        content:
          type: string
        status:
          type: string
          readOnly: true
          enum: [waiting, accepted, rejected]
          description: >
            * `waiting` - Waiting for acceptance

            * `accepted` - Accepted and ready to be published

            * `rejected` - Rejected and could not to be published
      required:
      - id
      - title
      - article_id
      - user_id
      - timestamp
      - status

  parameters:
    blogArticleId:
      in: path
      name: id
      required: true
      schema:
        type: string
      description: id of an article
    blogRevisionId:
      in: path
      name: id
      required: true
      schema:
        type: integer
        format: int32
      description: id of a revision

  securitySchemes:
    admin:
      type: apiKey
      in: header
      name: X-ADMIN-TOKEN
      description: Credentials or access token for API
    blogWriter:
      type: apiKey
      in: header
      name: X-BLOG-WRITER-TOKEN
      description: Credentials or access token for API
