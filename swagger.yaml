openapi: 3.0.0
info:
  version: 1.7.0
  title: 73rd Afes website api
servers:
- url: https://api.afes.info/
- url: http://localhost:8000/ # for local test

paths:
  /admin/login:
    post:
      summary: ログイン認証とAPIキーの受け取り
      description: 5回/分まで試行できます
      tags:
      - admin auth
      requestBody:
        description: 認証情報
        content:
          application/json:
            schema:
              type: object
              required:
              - id
              - password
              properties:
                id:
                  type: string
                password:
                  type: string
      responses:
        200:
          description: Admin api token
          content:
            application/json:
              schema:
                type: object
                properties:
                  token:
                    type: string
        401:
          description: idかパスワードが間違っています
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        429:
          description: 試行回数の上限に達しました
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
  /admin/user:
    get:
      summary: ログイン中のAdminの情報の取得
      description: AdminのAPI KEYから、ログイン中のアカウントのidのnameを取得します
      tags:
      - admin auth
      security:
      - admin: []
      responses:
        200:
          description: ログイン中のAdminユーザー情報
          content:
            application/json:
              schema:
                type: object
                required:
                - id
                - name
                properties:
                  id:
                    type: string
                  name:
                    type: string
        401:
          description: ログインしていません; 無効なAdmin Tokenです
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
  /admin/change_password:
    post:
      summary: パスワード変更
      tags:
      - admin auth
      security:
      - admin: []
      requestBody:
        description: 新しいパスワード(8文字以上)
        content:
          application/json:
            schema:
              type: object
              required:
              - password
              properties:
                password:
                  type: string
      responses:
        204:
          description: パスワードを変更しました
        400:
          description: 新しいパスワードが条件を満たしていません

  /writer/login:
    post:
      summary: Login and get API Key
      tags:
      - writer auth
      requestBody:
        description: credentials
        content:
          application/json:
            schema:
              type: object
              required:
              - id
              - password
              properties:
                id:
                  type: string
                password:
                  type: string
      responses:
        200:
          description: Login Successful
          content:
            application/json:
              schema:
                type: object
                properties:
                  token:
                    type: string
        401:
          description: Login failed
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        429:
          description: Too many login attempts
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
  /writer/user:
    get:
      summary: get logged in user info
      tags:
      - writer auth
      security:
      - blogWriter: []
      responses:
        200:
          description: User info (logged in)
          content:
            application/json:
              schema:
                type: object
                required:
                - id
                - name
                properties:
                  id:
                    type: string
                  name:
                    type: string
        401:
          description: Not logged in
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
  /writer/change_password:
    post:
      summary: Change password
      tags:
      - writer auth
      security:
      - blogWriter: []
      requestBody:
        description: new password
        content:
          application/json:
            schema:
              type: object
              required:
              - password
              properties:
                password:
                  type: string
      responses:
        204:
          description: password changed successfully
        400:
          description: bad password

  /blog/articles:
    get:
      summary: get list of articles
      tags:
      - blog article
      parameters:
      - in: query
        name: filter
        schema:
          allOf:
          - $ref: "#/components/schemas/BlogArticle"
          - properties:
              author_id:
                type: string
        style: form
        explode: true
        required: false
        description: params to filter
      - in: query
        name: summary_length
        schema:
          type: integer
        style: form
        required: false
        description: >
          summary will be cut with this length.
          if omitted, summary won't be limited with length.
      - in: query
        name: q
        schema:
          type: string
        description: |
          search query
          article has match in title or content will be returned
      responses:
        200:
          description: list of articles
          content:
            application/json:
              schema:
                type: array
                items:
                  allOf:
                  - $ref: "#/components/schemas/BlogArticle"
                  - properties:
                      summary:
                        type: string
                  - required:
                    - id
                    - user_id
                    - category
                    - title
                    - author
                    - created_at
                    - updated_at
                    - summary
        400:
          description: bad params
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
  /blog/articles/{id}:
    parameters:
    - $ref: "#/components/parameters/blogArticleId"
    get:
      summary: get info of the article
      tags:
      - blog article
      responses:
        200:
          description: article info
          content:
            application/json:
              schema:
                allOf:
                - $ref: "#/components/schemas/BlogArticle"
                - properties:
                    content:
                      type: string
                - required:
                  - id
                  - user_id
                  - category
                  - title
                  - revision_id
                  - created_at
                  - updated_at
                  - content
        404:
          description: no article found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
    patch:
      summary: update the article
      security:
      - admin: []
      tags:
      - blog article
      requestBody:
        description: data to update
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/BlogArticle"
      responses:
        200:
          description: info of specified revision
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/BlogArticle"
        400:
          description: specified revision is not for the article
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        404:
          description: no sprcified revision found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        409:
          description: specified revision is not accepted
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
    delete:
      summary: remove the article
      security:
      - admin: []
      tags:
      - blog article
      responses:
        204:
          description: remove successful
        404:
          description: no specified revision found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
  /blog/articles/{id}/good:
    parameters:
    - $ref: "#/components/parameters/blogArticleId"
    put:
      summary: give "good" to article
      tags:
      -  blog article
      responses:
        200:
          description: success
        404:
          description: no article found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        429:
          description: Too many attempts
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
    delete:
      summary: remove "good" from article
      tags:
      - blog article
      responses:
        200:
          description: successfully removed
        404:
          description: no article found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        429:
          description: Too many attempts
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
  /blog/articles/{id}/bad:
    parameters:
    - $ref: "#/components/parameters/blogArticleId"
    put:
      summary: give "bad" to article
      tags:
      - blog article
      responses:
        200:
          description: success
        404:
          description: no article found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        429:
          description: Too many attempts
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
    delete:
      summary: remove "bad" from article
      tags:
      - blog article
      responses:
        200:
          description: successfully removed
        404:
          description: no article found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        429:
          description: Too many attempts
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
  /blog/categories/:
    get:
      summary: get list of categories
      tags:
      - blog article
      responses:
        200:
          description: list of categories
          content:
            application/json:
              schema:
                type: object
                additionalProperties:
                  description: id of category
                  type: object
                  properties:
                    name:
                      type: string
                      description:
                        name of category
                    visible:
                      type: boolean
                      description:
                        whether should be shown on the top page

  /blog/revisions/:
    get:
      summary: get list of revisions
      description: "note: writer can see only owned revision"
      tags:
      - blog revision
      security:
      - admin: []
      - blogWriter: []
      parameters:
      - in: query
        name: filter
        schema:
          allOf:
            - $ref: "#/components/schemas/BlogRevision"
            - properties:
                author_id:
                  type: string
        style: form
        explode: true
        required: false
        description: params to filter
      responses:
        200:
          description: list of revisions
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/BlogRevision"
        400:
          description: bad params
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
    post:
      summary: create new revision
      tags:
      - blog revision
      security:
      - blogWriter: []
      requestBody:
        description: params to filter
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/BlogRevision"
      responses:
        201:
          description: created
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/BlogRevision"
        400:
          description: some params are invalid
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
  /blog/revisions/contrib/:
    post:
      summary: create new contrib
      tags:
      - blog revision
      requestBody:
        description: params to filter
        content:
          application/json:
            schema:
              allOf:
              - $ref: "#/components/schemas/BlogRevision"
              - properties:
                  article_id:
                    readOnly: true
      responses:
        201:
          description: created
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/BlogRevision"
        400:
          description: some params are invalid
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
  /blog/revisions/{id}:
    parameters:
    - $ref: "#/components/parameters/blogRevisionId"
    get:
      summary: get the revision
      description: "note: writer can see only owned revision"
      tags:
      - blog revision
      security:
      - admin: []
      - blogWriter: []
      responses:
        200:
          description: info of specified revision
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/BlogRevision"
        403:
          description: the revision could not be seen by the user
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        404:
          description: no sprcified revision found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
    post:
      summary: edit the revision
      description: create new revision based on the specific revision
      tags:
      - blog revision
      security:
      - admin: []
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/BlogRevision"
      responses:
        201:
          description: created
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/BlogRevision"
        400:
          description: some params are invalid
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
  /blog/revisions/{id}/accept:
    parameters:
    - $ref: "#/components/parameters/blogRevisionId"
    patch:
      summary: accept the revision
      security:
      - admin: []
      tags:
      - blog revision
      responses:
        200:
          description: operation successful
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/BlogRevision"
        404:
          description: no specified revision found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
  /blog/revisions/{id}/reject:
    parameters:
    - $ref: "#/components/parameters/blogRevisionId"
    patch:
      summary: reject the revision
      security:
      - admin: []
      tags:
      - blog revision
      responses:
        200:
          description: operation successful
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/BlogRevision"
        404:
          description: no specified revision found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"

  /images:
    post:
      summary: upload new image
      tags:
      - images
      security:
      - blogWriter: []
      requestBody:
        description: params to filter
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                content:
                  type: string
                  format: binary
              required:
              - content
      responses:
        201:
          description: created
          content:
            application/json:
              schema:
                type: object
                properties:
                  id:
                    type: string
                required:
                - id
        400:
          description: some params are invalid / content is not an image
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
  /images/{id}:
    get:
      summary: get image
      tags:
      - images
      parameters:
      - in: path
        name: id
        required: true
        schema:
          type: string
        description: id of an image
      - in: query
        name: w
        required: false
        schema:
          type: integer
        description: width of image
      - in: query
        name: h
        required: false
        schema:
          type: integer
        description: height of image
      - in: query
        name: orig
        required: false
        schema:
          type: string
          enum: ['yes']
        description: whether you want to get original image
      responses:
        200:
          description: content
          content:
            image/*:
              schema:
                type: string
                format: binary
        404:
          description: not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"

  /ogimage:
    get:
      summary: generate og image for static page
      tags:
      - ogimage
      parameters:
      - in: query
        name: title
        required: true
        schema:
          type: string
      responses:
        200:
          description: image
          content:
            image/*:
              schema:
                type: string
                format: binary
        400:
          description: bad params
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
  /ogimage/articles/{id}:
    get:
      summary: generate og image from article data
      tags:
      - ogimage
      parameters:
      - in: path
        name: id
        required: true
        schema:
          type: string
        description: id of article
      responses:
        200:
          description: image
          content:
            image/*:
              schema:
                type: string
                format: binary
        400:
          description: bad params
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        404:
          description: no article found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
  /ogimage/preview:
    get:
      summary: generate og image from param data
      tags:
      - ogimage
      parameters:
      - in: query
        name: title
        required: true
        schema:
          type: string
        description: title
      - in: query
        name: author
        required: false
        schema:
          type: string
        description: author
      - in: query
        name: category
        required: false
        schema:
          type: string
        description: category
      responses:
        200:
          description: image
          content:
            image/*:
              schema:
                type: string
                format: binary
        400:
          description: bad params
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"

components:
  schemas:
    Error:
      type: object
      required:
        - code
        - message
      properties:
        code:
          type: integer
          format: int32
        message:
          type: string
    BlogArticle:
      type: object
      properties:
        id:
          type: string
        category:
          type: string
        title:
          type: string
        author:
          type: object
          readOnly: true
          properties:
            id:
              type: string
            name:
              type: string
        handle_name:
          type: string
        revision_id:
          type: integer
          format: int32
        good_count:
          type: integer
          format: int32
          readOnly: true
        bad_count:
          type: integer
          readOnly: true
          format: int32
        created_at:
          type: string
          format: date-time
        updated_at:
          type: string
          format: date-time
    BlogRevision:
      type: object
      properties:
        id:
          type: integer
          format: int32
          readOnly: true
        title:
          type: string
        article_id:
          type: string
          pattern: "[A-Za-z0-9_-]+"
        author:
          type: object
          readOnly: true
          properties:
            id:
              type: string
            name:
              type: string
        handle_name:
          type: string
        timestamp:
          type: string
          format: date-time
          readOnly: true
        content:
          type: string
        status:
          type: string
          readOnly: true
          enum: [waiting, accepted, rejected]
          description: >
            * `waiting` - Waiting for acceptance

            * `accepted` - Accepted and ready to be published

            * `rejected` - Rejected and could not to be published
      required:
      - id
      - title
      - article_id
      - user_id
      - timestamp
      - status

  parameters:
    blogArticleId:
      in: path
      name: id
      required: true
      schema:
        type: string
      description: id of an article
    blogRevisionId:
      in: path
      name: id
      required: true
      schema:
        type: integer
        format: int32
      description: id of a revision

  securitySchemes:
    admin:
      type: apiKey
      in: header
      name: X-ADMIN-TOKEN
      description: Credentials or access token for API
    blogWriter:
      type: apiKey
      in: header
      name: X-BLOG-WRITER-TOKEN
      description: Credentials or access token for API
